@charset "utf-8";


//----------------------------------------------------------------
// メディアクエリー記述
//----------------------------------------------------------------
@mixin breakpoint($point){

  @if $point == full{
    @media screen and (max-width:$bp-pc + 40px){
      @content;
    }
  }

  @else if $point == pc{
    @media screen and (max-width:$bp-pc - 1px){
      @content;
    }
  }

  @else if $point == tab{
    @media screen and (max-width:$bp-tab){
      @content;
    }
  }

  @else if $point == sp{
    @media screen and (max-width:$bp-sp){
      @content;
    }
  }

  @else{
    @media screen and (max-width:$point){
      @content;
    }
  }
}


//----------------------------------------------------------------
// CSSスプライト（画像パス、画像幅・高さを手動設定）
//----------------------------------------------------------------
// $img    : 拡張子を除いた画像ファイル名
// $repeat    : background-repeat指定
// $pos    : background-position指定
// $format    : 画像ファイルの拡張子
// $img_path    : 画像のディレクトリパス（ルート相対推奨）
// $width※    : 低解像度画像から幅取得：
// $height※    : 低解像度画像から高さ取得：
// ※デフォルトの$widthと$heightは、scssディレクトリを
// 基準に相対パスで画像ファイルを読み込み、幅と高さを取得します。
// $img_pathが相対パスのときは、$widthと$heightは手動でpx指定入力してください。
// $use-2x   :true 高解像度対応（setting.scssで設定）
//----------------------------------------------------------------
@mixin bg(
  $img,
  $repeat,
  $pos,
  $format,
  $img_path:$cmn_img_dir,
  $width:$img_width,
  $height:$img_height,
  $img-2x:$use-2x){
  background-image: url(#{$img_path}#{$img}.#{$format});
  background-repeat: #{$repeat};
  background-position: #{$pos};

  @if $img-2x{
    @include background-size($width / 2, $height / 2);
  }
}


//----------------------------------------------------------------
// $pseudo    : before / after（空の疑似要素生成）
//----------------------------------------------------------------
@mixin pseudo($pseudo:before, $display:inline-block, $width:auto, $height:auto, $pos:relative, $top:false, $right:false, $bottom:false, $left:false){
  position:relative;
  &:#{$pseudo}{
    content:"";
    display:#{$display};
    width:#{$width};
    height:#{$height};
    overflow:hidden;
    position:#{$pos};
    @if $top{
      top:#{$top};
    }
    @if $right{
      right:#{$right};
    }
    @if $bottom{
      bottom:#{$bottom};
    }
    @if $left{
      left:#{$left};
    }
  }
}


//----------------------------------------------------------------
// 汎用矢印（ ＜ ＞ ）生成
//----------------------------------------------------------------
// $pseudo    : before / after
// $pos    : right / left / bottom / top
// $width    : 矢印の線幅（px）
// $color    : 矢印の前景色
//----------------------------------------------------------------
@mixin arrow($pseudo:before, $pos:right, $width:2.5px, $color:$gray){
  position:relative;
  &:#{$pseudo}{
    content: "";
    display:block;
    position:absolute;
    border-right:$width solid $color;
    border-bottom:$width solid $color;
    width:$width * 3;  // 矢印の大きさに合わせて変更してください。
    height:$width * 3; // 矢印の大きさに合わせて変更してください。
    @if $pos == 'right'{
      transform: rotate(-45deg);
    }
    @if $pos == 'left'{
      transform: rotate(135deg);
    }
    @if $pos == 'bottom'{
      transform: rotate(45deg);
    }
    @if $pos == 'top'{
      transform: rotate(-135deg);
    }
  }
}


//----------------------------------------------------------------
// 汎用矢印（ ▲ ）生成
//----------------------------------------------------------------
// $pseudo    : before / after
// $pos    : absolute / static
// $direction    : 矢印の向き（up / right / down / left）
// $width    : 矢印の大きさ（px）
// $color    : 矢印の前景色
//----------------------------------------------------------------
@mixin arrow-triangle($pseudo, $pos, $direction, $width, $color){
  @if $pos == 'absolute'{
    position:relative;
  }
  &:#{$pseudo}{
    content: "";
    display:inline-block;
    width:0;
    height:0;
    position:$pos;

    // absoluteだった場合のdisplay設定
    @if $pos == 'absolute'{
      margin:0;
      display:block;
    }

    // 矢印の向きの指定
    @if $direction == 'up'{
      border-width:0 $width $width $width;
      border-color: transparent transparent $color transparent;
    }
    @if $direction == 'right'{
      border-width:$width 0 $width $width;
      border-color: transparent transparent transparent $color;
    }
    @if $direction == 'down'{
      border-width:$width $width 0 $width;
      border-color:$color transparent transparent transparent;
    }
    @if $direction == 'left'{
      border-width:$width $width $width 0;
      border-color:transparent $color transparent transparent;
    }
    border-style:solid;
  }
}


//----------------------------------------------------------------
// フォントサイズ
//----------------------------------------------------------------
// %の場合
// $size    : 実際に指定したいフォントサイズ
// $context    : 要素が継承しているフォントサイズ
// 使い方
// 1. 18px相当にする：@include font-size(18)
// 2. 18pxにしたブロックの小要素を12px相当にする
// @include font-size(12, 18)
//----------------------------------------------------------------
// remの場合
// $font-size    : 実際に指定したいフォントサイズ
// 使い方
// 1. 13px相当にする：@include font-size(13)
//----------------------------------------------------------------
@mixin font-size($size, $context:$default-font-size){

  @if $font-percent{
    font-size:percentage($size / $context);
  }

  @if $font-rem{
    $rem: ($size / 10);
    font-size: $size + px;
    font-size: $rem +rem;
  }

  @if $font-px{
    font-size: $size + px;
  }
}


//----------------------------------------------------------------
// clearfix
//----------------------------------------------------------------
@mixin clearfix{
  &:before,
  &:after {
    content:"";
    display:table;
  }
  &:after {
    clear:both;
  }
}


//----------------------------------------------------------------
// 3点リーダー
//----------------------------------------------------------------
@mixin ellipsis{
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}


//----------------------------------------------------------------
// 画像とテキストの横並び
//----------------------------------------------------------------
@mixin image-parallel{
  @each $position in left, right{

    .image-#{$position}{
      overflow:hidden;

      >.image{
        float:#{$position};
        text-align:center;

        .caption{
          margin-top:$margin / 3;
          display:block;
          @include font-size(12);
        }

        @if $position == left{
          padding-right:percentage($col-space / $lyt-main);
        }
        @if $position == right{
          padding-left:percentage($col-space / $lyt-main);
        }
      }

      >.col{
        overflow:hidden;
      }

      // 回り込みあり
      &.wrap{
        >.image{
          margin-bottom:percentage($col-space / $lyt-main);
        }
      }

      // ====Media Queries====
      @include breakpoint(full){
        >.image{
          max-width:50%;
        }
      }

      @include breakpoint(tab){
        >.image{
          padding-left: 0;
          padding-right: 0;
          float:none;
          max-width:none;
          text-align: center;

          .caption{
            br{
              display:none;
            }
          }
        }
      }
      // ====Media Queries====
    }
  }
}


//----------------------------------------------------------------
// 画像用カラムレイアウト
//----------------------------------------------------------------
@mixin image-col-lyt{
  @for $i from 2 through 4{
    $col:($lyt-main - ($col-space * ($i - 1))) / $i;

    .image-col-#{$i}{
      margin-top: 0;
      @extend %clearfix;
      text-align: center;

      >li{
        margin-top: $margin;
        margin-left:percentage($col-space / $lyt-main);
        float:left;
        box-sizing:border-box;
        width:percentage($col / $lyt-main);

        &:first-child{
          margin-left:0;
        }

        &:nth-child(#{$i}n+1){
          margin-left:0;
          clear:left;
        }

        li{
          margin-left:0;
          width:auto;
          float:none;
        }

        .caption{
          margin-top:5px;
          display:block;
          @include font-size(12);
        }
      }

      // ====Media Queries====
      @include breakpoint(sp){
        >li{
          margin-left:0;
          float:none;
          text-align: center;
        }
      }
      // ====Media Queries====
    }
  }
}


//----------------------------------------------------------------
// リスト用カラムレイアウト
//----------------------------------------------------------------
@mixin list-col-lyt{
  @for $i from 2 through 4{
    $col:($lyt-main - ($col-space * ($i - 1))) / $i;

    .list-col-#{$i}{
      margin-top: 0;
      @extend %clearfix;

      >li{
        margin-top: $margin;
        margin-left:percentage($col-space / $lyt-main);
        float:left;
        box-sizing:border-box;
        width:percentage($col / $lyt-main);

        &:first-child{
          margin-left:0;
        }

        &:nth-child(#{$i}n+1){
          margin-left:0;
          clear:left;
        }

        li{
          margin-left:0;
          width:auto;
          float:none;
        }
      }

      // ====Media Queries====
      @include breakpoint(sp){
        >li{
          margin-left:0;
          float:none;
        }
      }
      // ====Media Queries====
    }
  }
}


//----------------------------------------------------------------
// カラムレイアウト
//----------------------------------------------------------------
@mixin col-lyt{
  @for $i from 2 through 4{
    $col:($lyt-main - ($col-space * $i)) / $i;

    .col-lyt-#{$i}{
      overflow: hidden;

      >.col-lyt-inner{
        margin-left: - (percentage($col-space / $lyt-main));
        width: 100% + (percentage($col-space / $lyt-main));
        @extend %clearfix;

        >.col{
          margin-left:percentage($col-space / $lyt-main);
          float:left;
          box-sizing:border-box;
          width:percentage($col / $lyt-main);

          &:nth-child(#{$i}n+1){
            clear:left;
          }
        }
      }


      // ====Media Queries====
      @include breakpoint(900px){
        >.col-lyt-inner{
          >.col{
            width:percentage((($lyt-main - ($col-space * 2)) / 2) / $lyt-main);

            &:nth-child(2n+1){
              clear:left;
            }
            &:nth-child(#{$i}n+1){
              clear:none;
            }
          }
        }
      }
      @include breakpoint(sp){
        >.col-lyt-inner{
          margin-left: 0;
          width: auto;

          >.col{
            margin-left: 0;
            float: none;
            width: auto;
          }
        }
      }
      // ====Media Queries====
    }
  }
}

//----------------------------------------------------------------
// グリッドレイアウト
//----------------------------------------------------------------
@mixin grid($grid-num:12){

  /*	12 COLUMN : RESPONSIVE GRID SYSTEM
  DEVELOPER : DENIS LEBLANC
  URL : http://responsive.gs
  VERSION : 3.0
  LICENSE : GPL & MIT */

  // SET ALL ELEMENTS TO BOX-SIZING : BORDER-BOX
  [class^="grid-"]{
    box-sizing:border-box;
  }

  // メインコンテナの幅設定
  .grid-container{
    margin:0 auto;
    max-width:$lyt-cont;
    @extend %clearfix;

    // clearfix
    .grid-row,
    .grid-col,
    .grid-clr,
    .grid-group{
      @extend %clearfix;
    }

    // グリッドカラムのデフォルトスタイル
    .grid-col{
      display:block;
      float:left;
    }

    // スペースがある場合のマージン設定
    .grid-gutters{
      .grid-col{
        margin-left:percentage($col-space / $lyt-main);
        &:first-child{
          margin-left:0;
        }
      }
    }

    // グリッドカラム幅設定
    // スペースなし
    @for $i from 1 through $grid-num{
      .grid-span-#{$i}{width:percentage($i / $grid-num);}
    }

    // スペースあり
    .grid-gutters{
      @for $i from 1 through $grid-num{
        $gutter:percentage($col-space / $lyt-main);
        .grid-span-#{$i}{width:((100% - ((($grid-num / $i) - 1) * $gutter)) / $grid-num) * $i;}
      }
    }

    // ====Media Queries====
    @include breakpoint(sp){
      .grid-col {
        width:100% !important;
        float:none;
      }
      .grid-gutters{
        .grid-col{
          margin-left:0;
        }
      }
    }
    // ====Media Queries====
  }
}


//----------------------------------------------------------------
// マージン・パディング制御用クラス
//----------------------------------------------------------------
@mixin mp-control{

  @for $i from 0 through 6{
    $number:($i * 5);

    @each $position in top, right, bottom, left{
      //マージン
      .m-#{$position}-#{$number}{
        @if $number == 0{
          margin-#{$position}:0 !important;// 0の場合はpxはつけない
        }@else{
          margin-#{$position}:$i * 5px !important;
        }
      }
    }

    @each $position in top, right, bottom, left{
      //パディング
      .p-#{$position}-#{$number}{
        @if $number == 0{
          padding-#{$position}:0 !important;// 0の場合はpxはつけない
        }@else{
          padding-#{$position}:$i * 5px !important;
        }
      }
    }
  }
}


//----------------------------------------------------------------
// Width制御
//----------------------------------------------------------------
@mixin width-control{
  @for $i from 1 through 20{
    $w:($i * 5);
    .w-#{$w} { width: 5% * $i !important;}
  }
}


//----------------------------------------------------------------
// Line制御
//----------------------------------------------------------------
@mixin line-control{
  @each $position in top, right, bottom, left{
    .line-#{$position}{border-#{$position}:1px #000 solid !important;}
    .line-reset-#{$position}{border-#{$position}:none !important;}
  }
}


//----------------------------------------------------------------
// Display制御
//----------------------------------------------------------------
@mixin display-control{
  @each $display in block, inline-block, inline{
    .#{$display}{display:#{$display} !important;}
  }
}


//----------------------------------------------------------------
// font-awesome-def
//----------------------------------------------------------------
// 疑似要素で表示しているアイコンのデフォルトスタイル
//----------------------------------------------------------------
@mixin font-awesome-def{
  line-height:1;
  font-family: FontAwesome;
  font-weight: normal;
  font-style: normal;
  text-decoration:none;
  text-align:left;
  speak:none;
}